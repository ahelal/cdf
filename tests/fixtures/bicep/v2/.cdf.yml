---
name: "ssh_b_{{ store('postfix', random_string(5, 'lower')) }}"
resource_group: "cdf_bicep_{{cdf.name}}"
location: "eastus2"
complete_deployment: true

vars:
  log_file: "{{cdf.tmp_dir}}/hook_log.txt"
  lang: "{{ env['LANG'] | default('en') }}"

params:
  name: "{{cdf.name}}_key"
  location: "{{cdf.location}}"
  key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDYOHP78UHR8LA9CVn/bX2r33KAQnu+4u6GcQLe7PAK8OUc2twWxQxcwfHyJY0Q8G+y8Z4tGgwuc8WxoaBhSN0ROA7KHEwrulgIHinme/7gJzBJE8avImsKKFrCtFDejKHrvY9vRrEKH72NX5y/+dSfhAGitPTCZdBcYJRVsfgfhr2OxACdf8odnZfhxiXN+s5sIzVCqh+h75plJcMeUeuOwfePKNF1p6r8Tz/UUKIyDZiPJ8vkwYH0bcjCc0FhpsK7thUXyNaBKyhCxW9D2fj4nC4SjzeJ1eG7zmaCUn4ZVuO+tSCWj4lvW+FCp1z1Xfv5pGOMkeedj9tvmag2vmzL hello1"
  lang: "{{vars.lang}}"
  extra: "{{vars.extra | default('default') }}"

up: "{{ cdf.config_dir }}/ssh.bicep"

hooks:
  log:
    description: "Log args to file"
    ops:
      - type: cmd
        args: /bin/sh -c "echo {{ args | join(' ') }} >> {{ vars.log_file }}"
        platform: ["linux", "darwin"]
      - type: cmd
        args: FIGURE THIS OUT IN PS
        platform: ["windows"]
  print_audit:
    description: "Print args passed and append to file "
    ops:
      - type: print
        args: "-> {{ args[1:] | join(' ') }}"
      - type: call
        args: log
  pre-up:
    description: "Print before going up"
    lifecycle: "pre-up"
    ops:
      - name: print_pre_up
        type: print
        args: Provisioning '{{cdf.name}}' '{{cdf.resource_group}}'
      - type: call
        args: log
  all-up:
    description: "Print before going up again and also post"
    lifecycle: ["post-up", "pre-up"]
    ops:
      - type: print
        args: Hook will run in "post-up", "pre-up"
      - type: call
        args: log
  post-up:
    description: "Print after going up"
    lifecycle: "post-up"
    ops:
      - type: print
        args: Hook will run post-up
      - type: call
        args: log
  pre-down:
    description: "Print before going down"
    lifecycle: "pre-down"
    ops:
      - name: print_pre_down
        type: print
        args: De-provisioning '{{cdf.name}}' '{{cdf.resource_group}}'
      - type: call
        args: log
  all-down:
    description: "Print before going down again and also post"
    lifecycle: ["post-down", "pre-down"]
    ops:
      - type: print
        args: Hook will run in "post-down", "pre-down"
      - type: call
        args: log
  post-down:
    description: "Print after going down"
    lifecycle: "post-down"
    ops:
      - type: print
        args: Hook will run post-down
      - type: call
        args: log
  az:
    description: "Run Az CLI"
    ops:
      - name: show
        args: resource show --id {{ result.resources[0]['id']}} --query 'name'
      - type: print
        args: "{{ hooks.az.show.stdout }}"
  script:
    description: "Run script"
    ops:
      - type: print
        args: Running script {{cdf.config_dir}}/script.sh and saving data to {{cdf.tmp_dir}}/script.txt
      - name: script_nix
        type: script
        args:
          - "{{cdf.config_dir}}/script.sh"
          - "{{cdf.tmp_dir}}/script.txt"
        platform: ["linux", "darwin"]
      - type: print
        args: "{{ hooks.script.script_nix }}"
        platform: ["linux", "darwin"]
      - name: script_win
        type: script
        args:
          - "{{cdf.config_dir}}/script.ps1"
          - "{{cdf.tmp_dir}}/script.txt"
        platform: ["windows"]

  print_result:
    description: "Print result output"
    ops:
      - type: print
        args: "{{ result['resources'] }}}}"
  cmd:
    description: "cmd"
    ops:
      - name: A
        type: cmd
        args: echo "stdout"
      - name: B
        type: cmd
        args: bash -c 'echo "stderr" 1>&2'
      - name: C
        type: print
        args: print
      - name: print
        type: print
        args: "A={{ hooks.cmd.A.stdout }}\nB={{ hooks.cmd.B.stderr }}\nC={{ hooks.cmd.C.stdout }}"
  fail:
    description: "Fail"
    ops:
      - type: cmd
        args: exit 1
  pre_test:
    description: "Clean up before running test"
    lifecycle: "pre-test"
    ops:
      - type: print
        args: Cleaning up {{vars.log_file}}
      - type: cmd
        args: "rm -f {{vars.log_file}}"
      - type: cmd
        args: "rm -f {{cdf.tmp_dir}}/script.txt"

#### to do tests
tests:
  default:
    file: "{{cdf.config_dir}}/tests/default/test.yml"

  expect_to_fail_and_fails:
    file: "{{cdf.config_dir}}/tests/expect_to_fail_and_fails/test.yml"
